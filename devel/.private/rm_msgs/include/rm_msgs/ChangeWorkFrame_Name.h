// Generated by gencpp from file rm_msgs/ChangeWorkFrame_Name.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_CHANGEWORKFRAME_NAME_H
#define RM_MSGS_MESSAGE_CHANGEWORKFRAME_NAME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct ChangeWorkFrame_Name_
{
  typedef ChangeWorkFrame_Name_<ContainerAllocator> Type;

  ChangeWorkFrame_Name_()
    : WorkFrame_name()  {
    }
  ChangeWorkFrame_Name_(const ContainerAllocator& _alloc)
    : WorkFrame_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _WorkFrame_name_type;
  _WorkFrame_name_type WorkFrame_name;





  typedef boost::shared_ptr< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> const> ConstPtr;

}; // struct ChangeWorkFrame_Name_

typedef ::rm_msgs::ChangeWorkFrame_Name_<std::allocator<void> > ChangeWorkFrame_Name;

typedef boost::shared_ptr< ::rm_msgs::ChangeWorkFrame_Name > ChangeWorkFrame_NamePtr;
typedef boost::shared_ptr< ::rm_msgs::ChangeWorkFrame_Name const> ChangeWorkFrame_NameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator1> & lhs, const ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator2> & rhs)
{
  return lhs.WorkFrame_name == rhs.WorkFrame_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator1> & lhs, const ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58a6b74050d8d3918fe8554a7dbbb407";
  }

  static const char* value(const ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58a6b74050d8d391ULL;
  static const uint64_t static_value2 = 0x8fe8554a7dbbb407ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/ChangeWorkFrame_Name";
  }

  static const char* value(const ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string WorkFrame_name\n"
;
  }

  static const char* value(const ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.WorkFrame_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChangeWorkFrame_Name_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::ChangeWorkFrame_Name_<ContainerAllocator>& v)
  {
    s << indent << "WorkFrame_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.WorkFrame_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_CHANGEWORKFRAME_NAME_H
