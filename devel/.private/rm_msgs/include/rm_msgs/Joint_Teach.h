// Generated by gencpp from file rm_msgs/Joint_Teach.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_JOINT_TEACH_H
#define RM_MSGS_MESSAGE_JOINT_TEACH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct Joint_Teach_
{
  typedef Joint_Teach_<ContainerAllocator> Type;

  Joint_Teach_()
    : teach_joint(0)
    , direction()
    , v(0)  {
    }
  Joint_Teach_(const ContainerAllocator& _alloc)
    : teach_joint(0)
    , direction(_alloc)
    , v(0)  {
  (void)_alloc;
    }



   typedef int16_t _teach_joint_type;
  _teach_joint_type teach_joint;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _direction_type;
  _direction_type direction;

   typedef int16_t _v_type;
  _v_type v;





  typedef boost::shared_ptr< ::rm_msgs::Joint_Teach_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::Joint_Teach_<ContainerAllocator> const> ConstPtr;

}; // struct Joint_Teach_

typedef ::rm_msgs::Joint_Teach_<std::allocator<void> > Joint_Teach;

typedef boost::shared_ptr< ::rm_msgs::Joint_Teach > Joint_TeachPtr;
typedef boost::shared_ptr< ::rm_msgs::Joint_Teach const> Joint_TeachConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::Joint_Teach_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::Joint_Teach_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::Joint_Teach_<ContainerAllocator1> & lhs, const ::rm_msgs::Joint_Teach_<ContainerAllocator2> & rhs)
{
  return lhs.teach_joint == rhs.teach_joint &&
    lhs.direction == rhs.direction &&
    lhs.v == rhs.v;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::Joint_Teach_<ContainerAllocator1> & lhs, const ::rm_msgs::Joint_Teach_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::Joint_Teach_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::Joint_Teach_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::Joint_Teach_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::Joint_Teach_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::Joint_Teach_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::Joint_Teach_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::Joint_Teach_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60cfaf744f64f5ac1ac6f8d51dde58e6";
  }

  static const char* value(const ::rm_msgs::Joint_Teach_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60cfaf744f64f5acULL;
  static const uint64_t static_value2 = 0x1ac6f8d51dde58e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::Joint_Teach_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/Joint_Teach";
  }

  static const char* value(const ::rm_msgs::Joint_Teach_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::Joint_Teach_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 teach_joint\n"
"string direction\n"
"int16 v\n"
;
  }

  static const char* value(const ::rm_msgs::Joint_Teach_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::Joint_Teach_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.teach_joint);
      stream.next(m.direction);
      stream.next(m.v);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Joint_Teach_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::Joint_Teach_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::Joint_Teach_<ContainerAllocator>& v)
  {
    s << indent << "teach_joint: ";
    Printer<int16_t>::stream(s, indent + "  ", v.teach_joint);
    s << indent << "direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.direction);
    s << indent << "v: ";
    Printer<int16_t>::stream(s, indent + "  ", v.v);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_JOINT_TEACH_H
