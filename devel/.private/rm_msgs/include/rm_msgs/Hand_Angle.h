// Generated by gencpp from file rm_msgs/Hand_Angle.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_HAND_ANGLE_H
#define RM_MSGS_MESSAGE_HAND_ANGLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct Hand_Angle_
{
  typedef Hand_Angle_<ContainerAllocator> Type;

  Hand_Angle_()
    : hand_angle()  {
      hand_angle.assign(0);
  }
  Hand_Angle_(const ContainerAllocator& _alloc)
    : hand_angle()  {
  (void)_alloc;
      hand_angle.assign(0);
  }



   typedef boost::array<int16_t, 6>  _hand_angle_type;
  _hand_angle_type hand_angle;





  typedef boost::shared_ptr< ::rm_msgs::Hand_Angle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::Hand_Angle_<ContainerAllocator> const> ConstPtr;

}; // struct Hand_Angle_

typedef ::rm_msgs::Hand_Angle_<std::allocator<void> > Hand_Angle;

typedef boost::shared_ptr< ::rm_msgs::Hand_Angle > Hand_AnglePtr;
typedef boost::shared_ptr< ::rm_msgs::Hand_Angle const> Hand_AngleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::Hand_Angle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::Hand_Angle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::Hand_Angle_<ContainerAllocator1> & lhs, const ::rm_msgs::Hand_Angle_<ContainerAllocator2> & rhs)
{
  return lhs.hand_angle == rhs.hand_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::Hand_Angle_<ContainerAllocator1> & lhs, const ::rm_msgs::Hand_Angle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::Hand_Angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::Hand_Angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::Hand_Angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::Hand_Angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::Hand_Angle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::Hand_Angle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::Hand_Angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a9a6c1a34f95837a03024846b0ba9d8";
  }

  static const char* value(const ::rm_msgs::Hand_Angle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a9a6c1a34f95837ULL;
  static const uint64_t static_value2 = 0xa03024846b0ba9d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::Hand_Angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/Hand_Angle";
  }

  static const char* value(const ::rm_msgs::Hand_Angle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::Hand_Angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#设置灵巧手角度，灵巧手有 6 个自由度，从 1~6 分别为小拇指，无名指，中指，食指，大拇指弯曲，大拇指旋转\n"
"\n"
"int16[6] hand_angle	#手指角度数组，范围：0~1000.另外，-1 代表该自由度不执行任何操作，保持当前状态\n"
;
  }

  static const char* value(const ::rm_msgs::Hand_Angle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::Hand_Angle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hand_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Hand_Angle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::Hand_Angle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::Hand_Angle_<ContainerAllocator>& v)
  {
    s << indent << "hand_angle[]" << std::endl;
    for (size_t i = 0; i < v.hand_angle.size(); ++i)
    {
      s << indent << "  hand_angle[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.hand_angle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_HAND_ANGLE_H
