// Generated by gencpp from file rm_msgs/Turtle_Driver.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_TURTLE_DRIVER_H
#define RM_MSGS_MESSAGE_TURTLE_DRIVER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct Turtle_Driver_
{
  typedef Turtle_Driver_<ContainerAllocator> Type;

  Turtle_Driver_()
    : message_type()
    , robot_mac_address()
    , vx(0.0)
    , vy(0.0)
    , vtheta(0.0)  {
    }
  Turtle_Driver_(const ContainerAllocator& _alloc)
    : message_type(_alloc)
    , robot_mac_address(_alloc)
    , vx(0.0)
    , vy(0.0)
    , vtheta(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type_type;
  _message_type_type message_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_mac_address_type;
  _robot_mac_address_type robot_mac_address;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _vtheta_type;
  _vtheta_type vtheta;





  typedef boost::shared_ptr< ::rm_msgs::Turtle_Driver_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::Turtle_Driver_<ContainerAllocator> const> ConstPtr;

}; // struct Turtle_Driver_

typedef ::rm_msgs::Turtle_Driver_<std::allocator<void> > Turtle_Driver;

typedef boost::shared_ptr< ::rm_msgs::Turtle_Driver > Turtle_DriverPtr;
typedef boost::shared_ptr< ::rm_msgs::Turtle_Driver const> Turtle_DriverConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::Turtle_Driver_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::Turtle_Driver_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::Turtle_Driver_<ContainerAllocator1> & lhs, const ::rm_msgs::Turtle_Driver_<ContainerAllocator2> & rhs)
{
  return lhs.message_type == rhs.message_type &&
    lhs.robot_mac_address == rhs.robot_mac_address &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vtheta == rhs.vtheta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::Turtle_Driver_<ContainerAllocator1> & lhs, const ::rm_msgs::Turtle_Driver_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::Turtle_Driver_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::Turtle_Driver_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::Turtle_Driver_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::Turtle_Driver_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::Turtle_Driver_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::Turtle_Driver_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::Turtle_Driver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e45b8bb2656522faceb0751bacf648f4";
  }

  static const char* value(const ::rm_msgs::Turtle_Driver_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe45b8bb2656522faULL;
  static const uint64_t static_value2 = 0xceb0751bacf648f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::Turtle_Driver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/Turtle_Driver";
  }

  static const char* value(const ::rm_msgs::Turtle_Driver_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::Turtle_Driver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#对Turtle海龟底盘的操作\n"
"string message_type     #消息类型,\"move\"为移动\n"
"string robot_mac_address    #Turtle底盘的MAC地址\n"
"float32 vx    #X轴方向速度\n"
"float32 vy    #Y轴方向速度\n"
"float32 vtheta    #\n"
;
  }

  static const char* value(const ::rm_msgs::Turtle_Driver_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::Turtle_Driver_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message_type);
      stream.next(m.robot_mac_address);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vtheta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Turtle_Driver_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::Turtle_Driver_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::Turtle_Driver_<ContainerAllocator>& v)
  {
    s << indent << "message_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message_type);
    s << indent << "robot_mac_address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_mac_address);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vtheta: ";
    Printer<float>::stream(s, indent + "  ", v.vtheta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_TURTLE_DRIVER_H
