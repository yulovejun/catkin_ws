// Generated by gencpp from file rm_msgs/Lift_Speed.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_LIFT_SPEED_H
#define RM_MSGS_MESSAGE_LIFT_SPEED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct Lift_Speed_
{
  typedef Lift_Speed_<ContainerAllocator> Type;

  Lift_Speed_()
    : speed(0)  {
    }
  Lift_Speed_(const ContainerAllocator& _alloc)
    : speed(0)  {
  (void)_alloc;
    }



   typedef int16_t _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::rm_msgs::Lift_Speed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::Lift_Speed_<ContainerAllocator> const> ConstPtr;

}; // struct Lift_Speed_

typedef ::rm_msgs::Lift_Speed_<std::allocator<void> > Lift_Speed;

typedef boost::shared_ptr< ::rm_msgs::Lift_Speed > Lift_SpeedPtr;
typedef boost::shared_ptr< ::rm_msgs::Lift_Speed const> Lift_SpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::Lift_Speed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::Lift_Speed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::Lift_Speed_<ContainerAllocator1> & lhs, const ::rm_msgs::Lift_Speed_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::Lift_Speed_<ContainerAllocator1> & lhs, const ::rm_msgs::Lift_Speed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::Lift_Speed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::Lift_Speed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::Lift_Speed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::Lift_Speed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::Lift_Speed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::Lift_Speed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::Lift_Speed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "368a599b530468ee137b04eea511a3ec";
  }

  static const char* value(const ::rm_msgs::Lift_Speed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x368a599b530468eeULL;
  static const uint64_t static_value2 = 0x137b04eea511a3ecULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::Lift_Speed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/Lift_Speed";
  }

  static const char* value(const ::rm_msgs::Lift_Speed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::Lift_Speed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#升降机构速度开环控制\n"
"#Speed < 0:升降机构向下运动\n"
"#Speed > 0:升降机构向上运动\n"
"#Speed = 0:升降机构停止运动\n"
"int16 speed         #速度百分比，-100~100\n"
;
  }

  static const char* value(const ::rm_msgs::Lift_Speed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::Lift_Speed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lift_Speed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::Lift_Speed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::Lift_Speed_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_LIFT_SPEED_H
