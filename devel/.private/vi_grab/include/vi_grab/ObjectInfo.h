// Generated by gencpp from file vi_grab/ObjectInfo.msg
// DO NOT EDIT!


#ifndef VI_GRAB_MESSAGE_OBJECTINFO_H
#define VI_GRAB_MESSAGE_OBJECTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vi_grab
{
template <class ContainerAllocator>
struct ObjectInfo_
{
  typedef ObjectInfo_<ContainerAllocator> Type;

  ObjectInfo_()
    : object_class()
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  ObjectInfo_(const ContainerAllocator& _alloc)
    : object_class(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_class_type;
  _object_class_type object_class;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::vi_grab::ObjectInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vi_grab::ObjectInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectInfo_

typedef ::vi_grab::ObjectInfo_<std::allocator<void> > ObjectInfo;

typedef boost::shared_ptr< ::vi_grab::ObjectInfo > ObjectInfoPtr;
typedef boost::shared_ptr< ::vi_grab::ObjectInfo const> ObjectInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vi_grab::ObjectInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vi_grab::ObjectInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vi_grab::ObjectInfo_<ContainerAllocator1> & lhs, const ::vi_grab::ObjectInfo_<ContainerAllocator2> & rhs)
{
  return lhs.object_class == rhs.object_class &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vi_grab::ObjectInfo_<ContainerAllocator1> & lhs, const ::vi_grab::ObjectInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vi_grab

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vi_grab::ObjectInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vi_grab::ObjectInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vi_grab::ObjectInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vi_grab::ObjectInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vi_grab::ObjectInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vi_grab::ObjectInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vi_grab::ObjectInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3fb8ba78b5949ec9fd9b6e9dd65602ad";
  }

  static const char* value(const ::vi_grab::ObjectInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3fb8ba78b5949ec9ULL;
  static const uint64_t static_value2 = 0xfd9b6e9dd65602adULL;
};

template<class ContainerAllocator>
struct DataType< ::vi_grab::ObjectInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vi_grab/ObjectInfo";
  }

  static const char* value(const ::vi_grab::ObjectInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vi_grab::ObjectInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string object_class  \n"
"float64 x            \n"
"float64 y            \n"
"float64 z \n"
;
  }

  static const char* value(const ::vi_grab::ObjectInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vi_grab::ObjectInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_class);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vi_grab::ObjectInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vi_grab::ObjectInfo_<ContainerAllocator>& v)
  {
    s << indent << "object_class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_class);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VI_GRAB_MESSAGE_OBJECTINFO_H
